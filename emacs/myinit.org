#+STARTUP: overview

* myinit
** User Interface tweaks

  - [ ] What is revert-buffer?

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t
        column-number-mode t
        electric-indent-mode nil
        indent-tabs-mode nil
        display-battery-mode t
        word-wrap t)
#+END_SRC

*** Custom face

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0)))))
#+END_SRC

*** Customize keys

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer)
#+END_SRC

*** Customize buffer list

#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer-other-window)
#+END_SRC

** Ido-mode

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t
        ido-everywhere t)

  (ido-mode 1)
#+END_SRC

** winner-mode

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
  (windmove-default-keybindings)
#+END_SRC

** swiper-mode

#+BEGIN_SRC emacs-lisp
  (req-package counsel)
  (req-package swiper-helm
    :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
    :bind
      ("C-r" . counsel-expression-history)
      ("\C-s" . swiper)
      ("C-c C-r" . ivy-resume)
      ("<f6>" . ivy-resume)
      ("C-x C-f" . counsel-find-file)
      ("<f1> f" . counsel-describe-function)
      ("<f1> v" . counsel-describe-variable)
      ("<f1> l" . counsel-find-library)
      ("<f2> i" . counsel-info-lookup-symbol)
      ("<f2> u" . counsel-unicode-char)
      ("C-c g" . counsel-git)
      ("C-c j" . counsel-git-grep)
      ("C-c k" . counsel-ag)
      ("C-x l" . counsel-locate)
      ("C-S-o" . counsel-rhythmbox))
#+END_SRC

** ace-window-mode

#+BEGIN_SRC emacs-lisp
  (req-package ace-window
    :init
    (global-set-key [remap other-window] 'ace-window))
#+END_SRC

** tabber-mode

#+BEGIN_SRC emacs-lisp
(req-package tabbar
  :config
  (tabbar-mode 1))
#+END_SRC

** Evil-mode

Turn Emacs into a VIM clone.

#+BEGIN_SRC emacs-lisp
  (req-package evil
    :config (evil-mode 1)
    (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
    (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode))
#+END_SRC

** try-mode

Try packages by temporarily installing them.

#+BEGIN_SRC emacs-lisp
  (req-package try)
#+END_SRC

** which key

Brings up some help in the middle of a key sequence.

#+BEGIN_SRC emacs-lisp
  (req-package which-key
    :config (which-key-mode))
#+END_SRC

** Helm-mode

#+BEGIN_SRC emacs-lisp
  (req-package helm
    :config
      (global-set-key (kbd "M-x") 'helm-M-x)
    :bind
      ("C-x c f" . helm-multi-files)
      ("M-x" . helm-M-x))
#+END_SRC

** org-mode

- What is [0/4]:
  - [ ] org-export-html-postamble
  - [ ] org-hide-leading-stars
  - [ ] org-startup-folded and (quote overview)
  - [ ] org-startup-indented

#+BEGIN_SRC emacs-lisp
  (req-package org
    :config
    (setq org-confirm-babel-evaluate nil ; Don't prompt me to confirm every time I want to evaluate a block.
          org-directory "~/foo/my-org-mode-notes"
          org-default-notes-file (concat org-directory "/notes.org")
          org-export-html-postamble nil
          org-hide-leading-stars t
          org-startup-folded (quote overview)
          org-startup-indented t
          org-agenda-files (list
			    "~/foo/my-org-mode-notes/"
			    "~/mine/orgmode/"
			    "~/mine/syncthing/sg3/shared/orgmode/"
			    "~/mine/syncthing/sg3/shared/orgzly/"))

    (add-to-list
     'org-babel-tangle-lang-exts
     '('("haskell" . "hs")))

    (org-babel-do-load-languages
     'org-babel-load-languages
     '((ipython . t)
       (python . t)
       (emacs-lisp . t)))

    (add-hook 'org-babel-after-execute-hook
      'org-display-inline-images 'append)


    (defun org-babel-tangle-block ()
      (interactive)
      (let ((current-prefix-arg '(4)))
	(call-interactively 'org-babel-tangle)))

    :bind ("C-c b" . org-babel-tangle-block))
#+END_SRC

*** org-ref

#+BEGIN_SRC emacs-lisp
  '(req-package org-ref
   :config
     ; The following is from the README.org
     ; https://github.com/jkitchin/org-ref/blob/master/README.org
     (setq reftex-default-bibliography '("~/ownCloud/bibliography/references.bib")
           org-ref-bibliography-notes "~/ownCloud/bibliography/notes.org"
           org-ref-default-bibliography '("~/ownCloud/bibliography/references.bib")
           org-ref-pdf-directory "~/ownCloud/bibliography/bibtex-pdfs/"
           bibtex-completion-bibliography "~/ownCloud/bibliography/references.bib"
           bibtex-completion-library-path "~/ownCloud/bibliography/bibtex-pdfs"
           bibtex-completion-notes-path "~/ownCloud/bibliography/helm-bibtex-notes"))
#+END_SRC

*** org-bullets

Org bullets makes things look pretty.

#+BEGIN_SRC emacs-lisp
  (req-package org-bullets
    :config
    (add-hook 'org-mode-hook
      (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org-caldav

#+BEGIN_SRC emacs-lisp
  (req-package org-caldav
    :config
    (setq org-caldav-url "https://owncloud.kaka.farm/remote.php/caldav/calendars/yuvallanger"
          org-caldav-calendar-id "org-mode"
          org-caldav-calendars
          '((:url "https://owncloud.kaka.farm/remote.php/caldav/calendars/yuvallanger"
             :calendar-id "org-mode"
             :files ("~/mine/orgmode/calendar.org")
             :inbox "~/mine/orgmode/caldav-sync-calendar-inbox.org")

            (:url "https://owncloud.kaka.farm/remote.php/dav/calendars/yuvallanger"
             :calendar-id "org-mode"
             :files ("~/mine/orgmode/tasks.org")
             :inbox "~/mine/orgmode/caldav-sync-tasks-inbox.org"))))
#+END_SRC

** Programming modes

*** geiser
#+BEGIN_SRC emacs-lisp
  (req-package geiser)
#+END_SRC
*** racket-mode
#+BEGIN_SRC emacs-lisp
  (req-package racket-mode)
#+END_SRC
*** arduino-mode

#+BEGIN_SRC emacs-lisp
  (req-package arduino-mode)
#+END_SRC

*** lispy

#+BEGIN_SRC emacs-lisp
  (req-package lispy
    :config
    (add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1))))
#+END_SRC

*** smartparens

#+BEGIN_SRC emacs-lisp
  ;;(req-package smartparens
  ;;  :config
  ;;  (add-hook 'hy-mode-hook #'smartparens-strict-mode))
#+END_SRC

*** rainbow-delimiters

#+BEGIN_SRC emacs-lisp
  (req-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

*** kivy-mode

#+BEGIN_SRC emacs-lisp
  (req-package kivy-mode)
#+END_SRC

*** yasnippet

#+BEGIN_SRC emacs-lisp
  (req-package yasnippet
    :config
    (setq yas-snippet-dirs
          (append '("~/foo/myasnippets")
                  yas-snippet-dirs))
    (yas-reload-all)
    (yas-global-mode 1))
#+END_SRC

*** elisp

**** paredit

#+begin_src emacs-lisp
  ;; (req-package paredit)
#+end_src

*** Python
**** pyvenv

#+BEGIN_SRC emacs-lisp
  (req-package pyvenv
    :config
      (pyvenv-mode))
#+END_SRC

**** live-py-mode

#+BEGIN_SRC emacs-lisp
  (req-package live-py-mode)
#+END_SRC

**** elpy

#+BEGIN_SRC emacs-lisp
  (req-package elpy
    :config
      (elpy-enable)
      (elpy-use-ipython))
#+END_SRC

**** ob-ipython

  org-babel for Jupyter.

#+BEGIN_SRC emacs-lisp
  (req-package ob-ipython
    :config
    (add-hook 'org-babel-after-execute-hook
      'org-display-inline-images 'append)
      ; display/update images in the buffer after I evaluate.
  )
#+END_SRC

**** EIN

#+BEGIN_SRC emacs-lisp
  (req-package ein
    :require markdown-mode)
#+END_SRC

**** hylang

#+BEGIN_SRC emacs-lisp
  (req-package hy-mode
    :config
    (add-hook 'hy-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'hy-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

**** Customize

#+BEGIN_SRC emacs-lisp
  (setq python-check-command "flake8"
        python-indent-offset 4)
#+END_SRC

*** Haskell

#+BEGIN_SRC emacs-lisp
  (req-package haskell-mode)
#+END_SRC

**** Customize

#+BEGIN_SRC emacs-lisp
  (setq haskell-hoogle-url "https://www.fpcomplete.com/hoogle?q=%s"
        haskell-stylish-on-save t
        haskell-tags-on-save t)
#+END_SRC

*** Coq (hehehe… it says "coq"…)

#+BEGIN_SRC emacs-lisp
  (setq proof-autosend-enable t
        proof-electric-terminator-enable t
        proof-shell-quiet-errors nil)
#+END_SRC

**** Customize

*** Magit
A git mode recommended on the wiki.

#+BEGIN_QUOTE
Magit is the most popular front end for Git. If you are new to Git and
do not need support for other vcs this is likely the package you
should try first.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (req-package magit
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup))
#+END_SRC

*** flycheck

#+BEGIN_SRC emacs-lisp
  (req-package flycheck
    :init (global-flycheck-mode t))
#+END_SRC

*** company-mode

#+BEGIN_SRC emacs-lisp
  (req-package company
    :config
      (global-company-mode))
#+END_SRC

** Communication
*** IRC
**** ERC
***** Customize

#+BEGIN_SRC emacs-lisp
  (req-package
    erc
    :config
    (setq
     log-mode t
     erc-log-write-after-insert t
     erc-log-write-after-send t))
#+END_SRC
**** circe
#+BEGIN_SRC emacs-lisp
  (req-package circe
    ;;:config
    ;;(setq
    ;; log-mode t
    ;; erc-log-write-after-insert t
    ;; erc-log-write-after-send t))
    )
#+END_SRC
***** helm-circe

#+BEGIN_SRC emacs-lisp
  (req-package helm-circe)
#+END_SRC
*** Matrix
**** matrix-client

#+BEGIN_SRC emacs-lisp
  ;;;;;;(req-package matrix-client)
#+END_SRC

** Accessability

*** TODO thumb-through

Skim web pages? XXX

#+begin_src emacs-lisp
  (req-package thumb-through)
#+end_src

*** eloud

Reads bits off the buffer.

#+begin_src emacs-lisp
  (req-package eloud
    :config
    (setq eloud-mode t
          eloud-speech-rate 200))
#+end_src

*** TODO ereader

XXX

#+begin_src emacs-lisp
  (req-package ereader)
#+end_src

*** spray

A speed reader.

#+begin_src emacs-lisp
  (req-package spray
    :config (setq spray-save-point t))
#+end_src

*** TODO emacspeak

How do we make this work? XXX

#+begin_src emacs-lisp
  ;(req-package
  ;  emacspeak
  ;)
#+end_src

** RSS
#+BEGIN_SRC emacs-lisp
  (req-package elfeed-goodies)
  (req-package elfeed-org
    :config
      (elfeed-org)
      (setq rmh-elfeed-org-files
            (list "~/foo/my-org-mode-notes/elfeed.org"
                  "~/mine/elfeed/private.org")
            elfeed-curl-max-connections 1)
    :bind
      ("C-x w" . elfeed))
#+END_SRC

** uptimes

#+BEGIN_SRC emacs-lisp
  (req-package uptimes)
#+END_SRC

* req-package-finish

#+BEGIN_SRC emacs-lisp
  (req-package-finish)
#+END_SRC
