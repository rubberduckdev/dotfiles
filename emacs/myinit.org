#+STARTUP: overview

* User Interface tweaks

  - [ ] What is revert-buffer?

  #+BEGIN_SRC emacs-lisp
    (setq-default inhibit-startup-message t)
    (setq-default column-number-mode t)
    (setq-default electric-indent-mode nil)
    (setq-default indent-tabs-mode nil)
    (setq-default display-battery-mode t)
    (setq-default word-wrap t)
  #+END_SRC

** Customize keys

  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "<f5>") 'revert-buffer)
  #+END_SRC

** Customize buffer list

  #+BEGIN_SRC emacs-lisp
    (defalias 'list-buffers 'ibuffer-other-window)
  #+END_SRC

* Ido-mode

  #+BEGIN_SRC emacs-lisp
    (setq-default ido-enable-flex-matching t)
    (setq-default ido-everywhere t)

    (ido-mode 1)
  #+END_SRC

* winner-mode

  #+BEGIN_SRC emacs-lisp
    (winner-mode 1)
    (windmove-default-keybindings)
  #+END_SRC

* swiper-mode

#+BEGIN_SRC emacs-lisp
  (use-package counsel :ensure t)
  (use-package swiper-helm
    :ensure t
    :config
    (ivy-mode 1)
    (setq-default ivy-use-virtual-buffers t)
    :bind
      ("C-r" . counsel-expression-history)
      ("\C-s" . swiper)
      ("C-c C-r" . ivy-resume)
      ("<f6>" . ivy-resume)
      ("C-x C-f" . counsel-find-file)
      ("<f1> f" . counsel-describe-function)
      ("<f1> v" . counsel-describe-variable)
      ("<f1> l" . counsel-find-library)
      ("<f2> i" . counsel-info-lookup-symbol)
      ("<f2> u" . counsel-unicode-char)
      ("C-c g" . counsel-git)
      ("C-c j" . counsel-git-grep)
      ("C-c k" . counsel-ag)
      ("C-x l" . counsel-locate)
      ("C-S-o" . counsel-rhythmbox))
#+END_SRC

* ace-window-mode

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :init
  (progn
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0)))))))
#+END_SRC

* tabber-mode

#+BEGIN_SRC emacs-lisp
(use-package tabbar
  :ensure t
  :config
  (tabbar-mode 1))
#+END_SRC

* Evil-mode

  Turn Emacs into a VIM clone.

  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :config (evil-mode 1))
  #+END_SRC

* try-mode

  Try packages by temporarily installing them.

  #+BEGIN_SRC emacs-lisp
    (use-package try
      :ensure t)
  #+END_SRC

* which key

  Brings up some help in the middle of a key sequence.

  #+BEGIN_SRC emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+END_SRC

* Helm-mode

  #+BEGIN_SRC emacs-lisp
    (use-package helm
      :ensure t
      :config (global-set-key (kbd "M-x") 'helm-M-x))
  #+END_SRC

* org-mode
** org-bullets

Org bullets makes things look pretty.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook
      (lambda () (org-bullets-mode 1))))
#+END_SRC

*** Customize

- What is [0/4]:
  - [ ] org-export-html-postamble
  - [ ] org-hide-leading-stars
  - [ ] org-startup-folded and (quote overview)
  - [ ] org-startup-indented

#+BEGIN_SRC emacs-lisp
  (setq-default org-confirm-babel-evaluate nil)
  ; Don't prompt me to confirm every time I want to evaluate a block.
  (setq-default org-directory "~/foo/orgmode")
  (setq-default org-default-notes-file
    (concat org-directory "/notes.org"))
  (setq-default org-export-html-postamble nil)
  (setq-default org-hide-leading-stars t)
  (setq-default org-startup-folded (quote overview))
  (setq-default org-startup-indented t)
  (setq-default org-agenda-files "~/.agenda_files")

  (add-hook 'org-babel-after-execute-hook
    'org-display-inline-images 'append)
#+END_SRC

*** org-ref

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :config
    ; The following is from the README.org
    ; https://github.com/jkitchin/org-ref/blob/master/README.org
    (setq
     reftex-default-bibliography
     '("~/ownCloud/bibliography/references.bib")

     org-ref-bibliography-notes
     "~/ownCloud/bibliography/notes.org")

     org-ref-default-bibliography
     '("~/ownCloud/bibliography/references.bib")

     org-ref-pdf-directory
     "~/ownCloud/bibliography/bibtex-pdfs/"

     bibtex-completion-bibliography
     "~/ownCloud/bibliography/references.bib"

     bibtex-completion-library-path
     "~/ownCloud/bibliography/bibtex-pdfs"

     bibtex-completion-notes-path
     "~/ownCloud/bibliography/helm-bibtex-notes")
#+END_SRC

* Programming modes
** elisp

*** paredit

#+begin_src emacs-lisp
  (use-package
    paredit
    :ensure t)
#+end_src

** Python

*** elpy

  #+BEGIN_SRC emacs-lisp
    (use-package elpy
      :ensure t
      :config
        (elpy-enable)
        (elpy-use-ipython))
  #+END_SRC

*** ob-ipython

  org-babel for Jupyter.

  #+BEGIN_SRC emacs-lisp
    (use-package ob-ipython
      :ensure t
      :config
      (org-babel-do-load-languages
        'org-babel-load-languages
        '((ipython . t)))
      (add-hook 'org-babel-after-execute-hook
        'org-display-inline-images 'append)
        ; display/update images in the buffer after I evaluate.
    )
  #+END_SRC

*** Customize

  #+BEGIN_SRC emacs-lisp
    (setq-default python-check-command "flake8")
    (setq python-indent-offset 4)
  #+END_SRC

** Haskell

*** Customize

  #+BEGIN_SRC emacs-lisp
    (setq-default haskell-hoogle-url "https://www.fpcomplete.com/hoogle?q=%s")
    (setq-default haskell-stylish-on-save t)
    (setq-default haskell-tags-on-save t)
  #+END_SRC

** Coq (hehehe… it says "coq"…)

  #+BEGIN_SRC emacs-lisp
    (setq-default proof-autosend-enable t)
    (setq-default proof-electric-terminator-enable t)
    (setq-default proof-shell-quiet-errors nil)
  #+END_SRC

*** Customize

** Magit
A git mode recommended on the wiki.

#+BEGIN_QUOTE
Magit is the most popular front end for Git. If you are new to Git and
do not need support for other vcs this is likely the package you
should try first.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    (global-set-key (kbd "C-x M-g") 'magit-dispatch-popup))
#+END_SRC

* Communication
** IRC
*** ERC
**** Customize

  #+BEGIN_SRC emacs-lisp
    (use-package
      erc
      :ensure t
      :config
      (setq-default log-mode t)
      (setq-default erc-log-write-after-insert t)
      (setq-default erc-log-write-after-send t))
  #+END_SRC

* Accessability

** TODO thumb-through

Skim web pages? XXX

#+begin_src emacs-lisp
  (use-package
    thumb-through
    :ensure t)
#+end_src

** eloud

Reads bits off the buffer.

#+begin_src emacs-lisp
  (use-package
    eloud
    :ensure t
    :config (setq-default eloud-mode t))
#+end_src

** TODO ereader

XXX

#+begin_src emacs-lisp
  (use-package
    ereader
    :ensure t)
#+end_src

** spray

A speed reader.

#+begin_src emacs-lisp
  (use-package
    spray
    :ensure t
    :config (setq-default spray-save-point t))
#+end_src

** TODO emacspeak

How do we make this work? XXX

#+begin_src emacs-lisp
  ;(use-package
  ;  emacspeak
  ;  :ensure t
  ;)
#+end_src
