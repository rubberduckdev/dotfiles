#+STARTUP: overview

* myinit
** shell
*** better-shell
#+BEGIN_SRC emacs-lisp
  (req-package better-shell
    :loader :elpa

    :bind
    (("C-'" . better-shell-shell)
     ("C-;" . better-shell-remote-open))
    )
#+END_SRC
*** bash-completion
#+BEGIN_SRC emacs-lisp
  (req-package bash-completion
    :loader :elpa
    )
#+END_SRC
** User Interface tweaks

  - [ ] What is revert-buffer?

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
  (setq display-battery-mode t)
  (setq electric-indent-mode nil)
  (setq indent-tabs-mode nil)
  (setq semantic-mode t)
  (setq show-paren-mode t)
  (setq word-wrap t)
  (setq inhibit-startup-message t)
#+END_SRC

*** Custom face

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t (:inherit nil :stipple
                           nil :background "white" :foreground "black" :inverse-video
                           nil :box nil :strike-through nil :overline nil :underline
                           nil :slant normal :weight normal :height 200 :width
                           normal :foundry "PfEd" :family "Inconsolata" ))))
   '(aw-leading-char-face ((t (:inherit
                               ace-jump-face-foreground :height 3.0))))
   )
#+END_SRC

*** Customize keys

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") 'revert-buffer
                  )
#+END_SRC

*** Customize buffer list

#+BEGIN_SRC emacs-lisp
  (defalias 'list-buffers 'ibuffer-other-window
    )
#+END_SRC

*** Customize menu

#+BEGIN_SRC emacs-lisp
  (setq gnus-group-update-tool-bar t)
  (setq menu-bar-mode nil)
  (setq tool-bar-mode nil)
#+END_SRC

** multiple-curses.el

#+BEGIN_SRC emacs-lisp
  (req-package multiple-cursors
    :loader :elpa
    )

#+END_SRC

** undo-tree

#+BEGIN_SRC emacs-lisp
  (req-package undo-tree
    :loader elpa

    :config
    (global-undo-tree-mode t)
    )
#+END_SRC

** ede-mode

#+BEGIN_SRC emacs-lisp
  (setq global-ede-mode t)
#+END_SRC

** Ido-mode

#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)

  (ido-mode 1)
#+END_SRC

** COMMENT projectile

#+BEGIN_SRC emacs-lisp
  (req-package
    :loader :elpa
    )
#+END_SRC

** winner-mode

#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
  (windmove-default-keybindings)
#+END_SRC

** swiper-mode

#+BEGIN_SRC emacs-lisp
  (req-package counsel
    :loader :elpa
    )

  (req-package swiper-helm
    :loader :elpa

    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)

    :bind
    ("C-r" . counsel-expression-history)
    ("\C-s" . swiper) ("C-c C-r" . ivy-resume)
    ("<f6>" . ivy-resume)
    ("C-x C-f" . counsel-find-file)
    ("<f1> f" . counsel-describe-function)
    ("<f1> v" . counsel-describe-variable)
    ("<f1> l" . counsel-find-library)
    ("<f2> i" . counsel-info-lookup-symbol)
    ("<f2> u" . counsel-unicode-char)
    ("C-c g" . counsel-git)
    ("C-c j" . counsel-git-grep)
    ("C-c k" . counsel-ag)
    ("C-x l" . counsel-locate)
    ("C-S-o" . counsel-rhythmbox)
    )
#+END_SRC

** ace-window-mode

#+BEGIN_SRC emacs-lisp
  (req-package ace-window
    :loader :elpa
    :init
    (global-set-key [remap other-window] 'ace-window)
    )
#+END_SRC

** tabber-mode

#+BEGIN_SRC emacs-lisp
  (req-package tabbar
    :loader :elpa

    :config
    (tabbar-mode 1)
    )
#+END_SRC

** COMMENT Evil-mode

Turn Emacs into a VIM clone.

#+BEGIN_SRC emacs-lisp
  (req-package evil
    :loader :elpa

    :config
    (evil-mode 1)
    (add-to-list 'evil-emacs-state-modes 'elfeed-show-mode)
    (add-to-list 'evil-emacs-state-modes 'elfeed-search-mode)
    )
#+END_SRC
*** evil-goggles

#+BEGIN_SRC emacs-lisp
  (req-package evil-goggles
    :loader :elpa

    :config
    (evil-goggles-mode)
    )
#+END_SRC
** try-mode

Try packages by temporarily installing them.

#+BEGIN_SRC emacs-lisp
  (req-package try
    :loader :elpa
    )
#+END_SRC

** which key

Brings up some help in the middle of a key sequence.

#+BEGIN_SRC emacs-lisp
  (req-package which-key
    :loader :elpa

    :config (which-key-mode)
    )
#+END_SRC

** Helm-mode

#+BEGIN_SRC emacs-lisp
  (req-package helm
    :loader :elpa

    :config
    (global-set-key (kbd "M-x") 'helm-M-x)

    :bind
    ("C-x c f" . helm-multi-files)
    ("M-x" . helm-M-x)
    )
#+END_SRC

** org-mode

- What is [0/4]:
  - [ ] org-export-html-postamble
  - [ ] org-hide-leading-stars
  - [ ] org-startup-folded and (quote overview)
  - [ ] org-startup-indented

#+BEGIN_SRC emacs-lisp
  (req-package org
    :loader :elpa
    :require ob-ditaa ob-ipython

    :config
    ;; Don't prompt me to confirm every time I want to evaluate a block.
    (setq org-confirm-babel-evaluate nil)
    (setq org-directory "~/foo/my-org-mode-notes")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (setq org-export-html-postamble nil)
    (setq org-hide-leading-stars t)
    (setq org-startup-folded (quote overview))
    (setq org-startup-indented t)
    (setq org-agenda-files (list "~/foo/my-org-mode-notes/" "~/mine/orgmode/" "~/mine/syncthing/sg3/shared/orgmode/" "~/mine/syncthing/sg3/shared/orgzly/"))

    (add-to-list 'org-babel-load-languages '((ipython . t)
                                             (python . t)
                                             (ditaa . t)))
    (setq org-ditaa-jar-path "/usr/share/ditaa/ditaa.jar")


    (add-to-list
     'org-babel-tangle-lang-exts
     '('("haskell" . "hs")))


    (add-hook 'org-babel-after-execute-hook
              'org-display-inline-images 'append
              )


    (defun org-babel-tangle-block ()
      (interactive)
      (let ((current-prefix-arg '(4)))
        (call-interactively 'org-babel-tangle))
      )

    :bind
    ("C-c b" . org-babel-tangle-block)
    )
#+END_SRC

*** org-ref

#+BEGIN_SRC emacs-lisp
  '(req-package org-ref
     :loader :elpa

     :config
     ;; The following is from the README.org
     ;; https://github.com/jkitchin/org-ref/blob/master/README.org
     (setq reftex-default-bibliography '("~/ownCloud/bibliography/references.bib")
           org-ref-bibliography-notes "~/ownCloud/bibliography/notes.org"
           org-ref-default-bibliography '("~/ownCloud/bibliography/references.bib")
           org-ref-pdf-directory "~/ownCloud/bibliography/bibtex-pdfs/"
           bibtex-completion-bibliography "~/ownCloud/bibliography/references.bib"
           bibtex-completion-library-path "~/ownCloud/bibliography/bibtex-pdfs"
           bibtex-completion-notes-path "~/ownCloud/bibliography/helm-bibtex-notes"))
#+END_SRC

*** org-bullets

Org bullets makes things look pretty.

#+BEGIN_SRC emacs-lisp
  (req-package org-bullets
    :config
    (add-hook 'org-mode-hook
              (lambda () (org-bullets-mode 1)))
    )
#+END_SRC

*** org-caldav

#+BEGIN_SRC emacs-lisp
  (req-package org-caldav
    :config
    (setq org-caldav-url "https://owncloud.kaka.farm/remote.php/caldav/calendars/yuvallanger")
    (setq org-caldav-calendar-id "org-mode")
    (setq org-caldav-calendars '((:url "https://owncloud.kaka.farm/remote.php/caldav/calendars/yuvallanger"
                                       :calendar-id "org-mode"
                                       :files ("~/mine/orgmode/calendar.org")
                                       :inbox "~/mine/orgmode/caldav-sync-calendar-inbox.org")

                                 (:url "https://owncloud.kaka.farm/remote.php/dav/calendars/yuvallanger"
                                       :calendar-id "org-mode"
                                       :files ("~/mine/orgmode/tasks.org")
                                       :inbox "~/mine/orgmode/caldav-sync-tasks-inbox.org"))))
#+END_SRC

*** orgnav

#+BEGIN_SRC emacs-lisp
  (req-package orgnav
    :loader :elpa
    )
#+END_SRC
** Programming modes

*** geiser
#+BEGIN_SRC emacs-lisp
  (req-package geiser
    :loader :elpa
    )
#+END_SRC
*** racket-mode
#+BEGIN_SRC emacs-lisp
  (req-package racket-mode
    :loader :elpa
    )
#+END_SRC
*** arduino-mode

#+BEGIN_SRC emacs-lisp
  (req-package arduino-mode
    :loader :elpa
    )
#+END_SRC

*** lispy

#+BEGIN_SRC emacs-lisp
  (req-package lispy
    :loader :elpa

    :config
    (add-hook 'lisp-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1)))
    )
#+END_SRC

*** COMMENT smartparens

#+BEGIN_SRC emacs-lisp
  (req-package smartparens
    :loader :elpa

    :config
    (add-hook 'hy-mode-hook #'smartparens-strict-mode)
    )
#+END_SRC

*** rainbow-delimiters

#+BEGIN_SRC emacs-lisp
  (req-package rainbow-delimiters
    :loader :elpa
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC

*** kivy-mode

#+BEGIN_SRC emacs-lisp
  (req-package kivy-mode
    :loader :elpa
    )
#+END_SRC

*** COMMENT yasnippet

#+BEGIN_SRC emacs-lisp
  (req-package yasnippet
    :loader :elpa

    :config
    (setq yas-snippet-dirs (append '("~/foo/myasnippets") yas-snippet-dirs))
    (yas-reload-all)
    (yas-global-mode 1)
    )
#+END_SRC

*** elisp

**** COMMENT paredit

#+begin_src emacs-lisp
  (req-package paredit
    :loader :elpa
    )
#+end_src

*** Python

**** General variables

#+BEGIN_SRC elisp
  (setq python-shell-interpreter "ipython")
  (setq python-shell-interpreter-args "-i --simple-prompt")
  (setq python-shell-interpreter-interactive-arg "-i --simple-prompt")
#+END_SRC

**** python-x

#+BEGIN_SRC emacs-lisp
  (req-package python-x
    :loader :elpa
    :config
    (python-x-setup))
#+END_SRC

**** pyvenv

#+BEGIN_SRC emacs-lisp
  (req-package pyvenv
    :loader :elpa

    :config
    (pyvenv-mode)
    (setq pyvenv-virtualenvwrapper-python "/usr/bin/env python")
    )
#+END_SRC

**** live-py-mode

#+BEGIN_SRC emacs-lisp
  (req-package live-py-mode
    :loader :elpa
    )
#+END_SRC

**** elpy

#+BEGIN_SRC emacs-lisp
  (req-package elpy
    :loader :elpa

    :config
    (elpy-enable)
    (elpy-use-ipython)
    (setq elpy-disable-backend-error-display nil)
    (setq elpy-project-root "~/foo/ants/")
    )
#+END_SRC

**** COMMENT ob-ipython

org-babel for Jupyter.

#+BEGIN_SRC emacs-lisp
  (req-package ob-ipython
    :loader :elpa

    :config
    ;; display/update images in the buffer after I evaluate.
    (add-hook 'org-babel-after-execute-hook
              'org-display-inline-images 'append)

    (setq ob-ipython-driver-path "~/.emacs.d/elpa/ob-ipython-20170628.1116/driver.py")
    )
#+END_SRC

**** EIN

#+BEGIN_SRC emacs-lisp
  (req-package ein
    :loader :elpa

    :require markdown-mode
    )
#+END_SRC

**** hylang

#+BEGIN_SRC emacs-lisp
  (req-package hy-mode
    :loader :elpa

    :config
    (add-hook 'hy-mode-hook (lambda () (lispy-mode 1)))
    (add-hook 'hy-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC

**** Customize

#+BEGIN_SRC emacs-lisp
  (setq python-check-command "flake8")
  (setq python-indent-offset 4)
#+END_SRC

*** Haskell

#+BEGIN_SRC emacs-lisp
  (req-package haskell-mode
    :loader :elpa
    )
#+END_SRC

**** Customize

#+BEGIN_SRC emacs-lisp
  (setq haskell-hoogle-url "https://www.fpcomplete.com/hoogle?q=%s")
  (setq haskell-stylish-on-save t)
  (setq haskell-tags-on-save t)
#+END_SRC

*** Coq (hehehe… it says "coq"…)

#+BEGIN_SRC emacs-lisp
  (setq proof-autosend-enable t)
  (setq proof-electric-terminator-enable t)
  (setq proof-shell-quiet-errors nil)
#+END_SRC

**** Customize

*** Magit

A git mode recommended on the [[https://www.emacswiki.org/emacs/Git][Emacs wiki]].

#+BEGIN_QUOTE
Magit is the most popular front end for Git. If you are new to Git and
do not need support for other vcs this is likely the package you
should try first.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (req-package magit
    :loader :elpa

    :config
    (setq magit-log-section-arguments (quote ("--graph" "--color" "--decorate" "-n256")))

    (global-set-key (kbd "C-x g")
                    'magit-status)

    (global-set-key (kbd "C-x M-g")
                    'magit-dispatch-popup)
    )
#+END_SRC

*** vc-fossil

#+BEGIN_SRC emacs-lisp
  (req-package vc-fossil
    :loader :elpa
    )
#+END_SRC

*** COMMENT flycheck

#+BEGIN_SRC emacs-lisp
  (req-package flycheck
    :loader :elpa

    :init (global-flycheck-mode t)
    )
#+END_SRC

*** company-mode

#+BEGIN_SRC emacs-lisp
  (req-package company
    :loader :elpa

    :config
    (global-company-mode)
    )
#+END_SRC

** Communication
*** IRC
**** ERC
***** Customize

#+BEGIN_SRC emacs-lisp
  (req-package erc
    :loader :elpa

    :config
    (setq log-mode t)
    (setq erc-log-write-after-insert t)
    (setq erc-log-write-after-send t)
    )
#+END_SRC
**** COMMENT circe

#+BEGIN_SRC emacs-lisp
  (req-package circe
    :loader :elpa

    :config
    (setq log-mode t)
    (setq erc-log-write-after-insert t)
    (setq erc-log-write-after-send t)
    )
#+END_SRC

***** helm-circe

#+BEGIN_SRC emacs-lisp
  (req-package helm-circe
    :loader :elpa
    )
#+END_SRC
*** Matrix
**** COMMENT matrix-client

#+BEGIN_SRC emacs-lisp
  (req-package matrix-client
    :loader :elpa
    )
#+END_SRC

** Accessability

*** TODO thumb-through

Skim web pages? XXX

#+begin_src emacs-lisp
  (req-package thumb-through
    :loader :elpa
    )
#+end_src

*** eloud

Reads bits off the buffer.

#+begin_src emacs-lisp
  (req-package eloud
    :loader :elpa

    :config
    (setq eloud-mode t)
    (setq eloud-speech-rate 200)
    )
#+end_src

*** TODO ereader

XXX

#+begin_src emacs-lisp
  (req-package ereader
    :loader :elpa
    )
#+end_src

*** spray

A speed reader.

#+begin_src emacs-lisp
  (req-package spray
    :loader :elpa

    :config
    (setq spray-save-point t)
    )
#+end_src

*** COMMENT emacspeak

How do we make this work? XXX

#+begin_src emacs-lisp
  (req-package emacspeak
    :loader :elpa
    )
#+end_src

** RSS

*** elfeed-org

#+BEGIN_SRC emacs-lisp
  (req-package elfeed-org
    :loader :elpa

    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/foo/my-org-mode-notes/elfeed.org" "~/mine/elfeed/private.org"))
    (setq  elfeed-curl-max-connections 1)

    :bind
    ("C-x w" . elfeed)
    )
#+END_SRC

*** elfeed-goodies

#+BEGIN_SRC emacs-lisp
  (req-package elfeed-goodies
    :loader :elpa
    )
#+END_SRC

** uptimes

#+BEGIN_SRC emacs-lisp
  (req-package uptimes
    :loader :elpa
    )
#+END_SRC

* req-package-finish

#+BEGIN_SRC emacs-lisp
  (req-package-finish)
#+END_SRC
